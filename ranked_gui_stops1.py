"""Gui application for the ranked retrieval program."""import osimport tkMessageBox#import cPickleimport shelveimport ttkfrom Tkinter import *from nltk.probability import FreqDistimport ranked_query_stops1 as rqfrom ir_objs_stops import *this_dir = os.path.dirname(os.path.realpath("__file__"))#pkl_file = open(os.path.join(this_dir, 'index0.pkl'), 'rb')terms = shelve.open(os.path.join(this_dir, "postings_stops"))docs_list = shelve.open(os.path.join(this_dir, "doc_stops"))#pkl_file.close()try:    stops = terms["STOPWORDS"]except KeyError:    print "Could not find stopwords, continuing without them."    stops = set(["the", "a", "is"])class SearchApp(object):    def __init__(self, root):        self.label = Label(text="Ranked Search",padx=5,pady=5)        self.label.grid(row=0,columnspan=3)        self.results = []                self.pages = []        self.root = root        #entry fields        self.searchfield = Entry(width=40)        self.searchfield.bind("<Return>", self.search)                #buttons        self.searchbutton = Button(text="Search",command=self.search,width=20)        self.morebutton = Button(text="More like this...", command=self.more,width=20)        self.viewbutton = Button(text="View", command=self.view, width=20)        self.nextbutton = Button(text="Next 10", command=self.nextpage, width=14)        self.previousbutton=Button(text="Previous 10", command=self.previous, width=14)        self.exitbutton = Button(text="Exit", command=self.root.destroy)            #Basic search window        self.searchfield.grid(row=1,padx=5,pady=5,columnspan=3)        self.searchbutton.grid(row=2,padx=5,pady=5,columnspan=3)        self.exitbutton.grid(row=3, columnspan=3)        #Results widgets##        self.scrollbar = Scrollbar()##        self.listbox = Listbox(yscrollcommand=self.scrollbar.set)##        self.scrollbar.config(command=self.listbox.yview)#        self.resultscroll = Scrollbar()##        self.resultdisplay = Listbox(yscrollcommand=self.scrollbar.set,width=50)#        self.resultscroll.config(command=self.resultdisplay.yview)        self.listbox = Listbox()        self.resultdisplay = Listbox(width=50)        def display_results(self, pagenum=0):        for result in self.results[pagenum*10:(pagenum*10)+9]:            resultdoc = docs_list[result[1]]            self.resultdisplay.insert(END,resultdoc.title.encode('utf-8'))        if not self.pages:            for page in range(1, len(self.results), 10):                self.pages.append(str(page)+"-"+str(page+9))        self.pagesbox = ttk.Combobox(self.root, values=self.pages, width=10, state="readonly")        self.pagesbox.bind('<<ComboboxSelected>>', self.page_select)        self.pagesbox.current(pagenum)        self.exitbutton.grid_forget()        self.resultdisplay.grid(row=3,column=0,padx=5,pady=5, columnspan=3)#        self.resultscroll.grid(row=3,column=1,sticky=N+S)        self.previousbutton.grid(row=4, pady=4, column=0)        self.pagesbox.grid(row=4, column=1)        self.nextbutton.grid(row=4, pady=4, column=2)        self.viewbutton.grid(row=5,padx=4,pady=4,columnspan=3)        self.morebutton.grid(row=6,padx=4,pady=4,columnspan=3)        self.exitbutton.grid(row=7, columnspan=3)#        self.backbutton.grid(row=7,padx=4,pady=4,columnspan=2)#        self.searchbutton.grid_forget()    def search(self, event=None):        self.resultdisplay.delete(0,END)        results = []        raw_query = self.searchfield.get()        if len(raw_query) == 0:            tkMessageBox.showwarning(None, "Please enter a search query.")        else:            doc_query = Document("query", raw_query, stops)            try:                self.results = rq.rank_query(doc_query, terms, docs_list, stops)            except KeyError, qt:                tkMessageBox.showwarning(None, "Query term "+str(qt)+" not found. Please try another query.")##            self.searchfield.grid_forget()            self.morebutton.grid(row=3,padx=5,pady=5,columnspan=2)            if len(self.results) == 0:                    self.resultdisplay.insert(END,"No results found. Please try another query.")                    self.morebutton.grid_forget()            else:                self.display_results()    #get more results like the selection    def more(self):        try:            title = self.resultdisplay.selection_get()        except IndexError:            tkMessageBox.showwarning(None,"Please select a result from the list.")            pass        self.resultdisplay.delete(0,END)        curr_page = self.pagesbox.current()        qdoc = next((docs_list[x[1]] for x in self.results[curr_page*10:(curr_page*10)+9] if title in docs_list[x[1]].title), None)        if qdoc:            self.results = rq.rank_query(qdoc, terms, docs_list, stops)            for i, name in enumerate([pair[i] for pair in self.results]):                if title == name:                    del self.results[i]        else:            self.resultdisplay.insert(END,"Document not found. Please try another query.")            self.morebutton.grid_forget()        self.display_results()            def view(self):        try:            title = self.resultdisplay.selection_get()        except IndexError:            tkMessageBox.showwarning(None,"Please select a result from the list.")            pass        w = Toplevel()        w.title(title)        header = Text(w, font='helvetica', height=1,borderwidth=0)        header.insert(INSERT,title)        header.configure(state="disabled")        header.pack()        top = Frame(w)        top.pack()        scroll = Scrollbar(top)        scroll.pack(side='right',fill='y')        body = Text(top,font='helvetica',width=70,yscrollcommand=scroll.set)        #Get the contents of the chosen file        curr_page = self.pagesbox.current()        qdoc = next((docs_list[x[1]] for x in self.results[curr_page*10:(curr_page*10)+9] if title in docs_list[x[1]].title), None)        body.insert(INSERT, qdoc.raw)                body.configure(state="disabled")        body.pack(side='left',fill='both')        scroll.config(command=body.yview)            separ = Frame(w,height=2,bd=1,relief='sunken')        separ.pack(fill=X,padx=5,pady=5)            bottom = Frame(w)        bottom.pack(side='bottom')        close = Button(bottom,text="Close",command=w.destroy)        close.pack(side='right')        def page_select(self, selection=None):        self.resultdisplay.delete(0,END)        self.display_results(pagenum=self.pagesbox.current())            def nextpage(self):        new_page = self.pagesbox.current()+1        if new_page < len(self.pages):            self.resultdisplay.delete(0,END)            self.display_results(pagenum=new_page)        def previous(self):        new_page = self.pagesbox.current()-1        if new_page >= 0:            self.resultdisplay.delete(0,END)            self.display_results(pagenum=new_page)        tk = Tk()tk.minsize(128,80)app = SearchApp(tk)tk.mainloop()terms.close()docs_list.close()